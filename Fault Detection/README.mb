انواع خطا
خطای تک بیتی
هرگاه یکی از بیت ها بعد از انتقال داده تغییر کند، خطای تک بیتی رخ داده است.خطای تک بیتی

خطای چند بیتی
خطای چند بیتی همان‌طور که از اسمش پیدا است، زمانی ایجاد میشود که چند بیت پس از انتقال داده تغییر کنند.خطای چند بیتی

روش های تشخیص خطا
ا Checksum
فرستنده:
برای encode پیام در این روش، داده ها با طول ثابت را با یکدیگر جمع l 1’s complement می کنیم و در نهایت مقدار checksum برابر با مکمل مجموع به‌دست آمده است. حال کافیست مقدار cheksum را به انتهای داده قبلی اضافه کنیم و ارسال کنیم.

مثال
String[] binaryStrings = new String[] {
    "1101",
    "1010",
    "1111",
    "1001",
};

String[] encodedBinaryStrings = new String[] {
    "1101",
    "1010",
    "1111",
    "1001",
    "1101",
};
Java
گیرنده:
برای بررسی وجود خطا در داده ها، همانند فرستنده، تمامی داده ها به همراه checksum را با یکدیگر جمع میکنیم. اگر مقدار مکمل مجموع فوق، برابر با ۰ باشد، به این معناست که خطایی در داده وجود نداشته. اگر تنها یکی از بیت های آن ۱ و یا تنها یکی از بیت های آن ۰ باشد، خطای تک بیتی رخ داده است. در غیر این صورت خطای چند بیتی.

ا Cyclic Redundancy Check (CRC)
فرستنده:
در این روش به یک عدد ثابت بین فرستنده و گیرنده به نام generator (G) نیاز داریم. مقدار generator در این برنامه برابر با 1001 است. برای encode پیام، ابتدا R را محسابه می‌کنیم.D-R

R=...برای محسابه آن به تعداد یکی کمتر از بیت های generator ، به سمت راست داده، ۰ می‌چسبانیم (در این برنامه باید سه ۰ اضافه کنید) تا با اضافه کردن R، داده جدید بر generator بخش پذیر باشد. سپس نوعی تقسیم (modulo-2 division) که به جای منها از xor استفاده میشه، بر آن دو اعمال می‌کنیم و R برابر با باقی مانده خواهد شد.. (حواستون باشه تا زمانی که طولش (و نه خودش) کمتر از generator نشده، xor میگیره.) به مثال خوب توجه کنید!!D/Gدر نهایت D-R را ارسال میکنیم.

مثال
binaryStrings = new String[] {
    "1101",
    "1010",
    "1111",
    "1001",
};
encodedBinaryStrings = new String[] {
    "1101100",
    "1010011",
    "1111110",
    "1001000",
};
Java
گیرنده:
برای بررسی وجود خطا در داده ها، همانند فرستنده، داده های دریافت شده را بر generator تقسیم می‌کنیم. اگر باقی مانده برابر با ۰ شود، به این معناست که خطایی رخ نداده. اگر تنها یکی از بیت های باقی‌مانده برابر با ۱ باشد، خطای تک بیتی رخ داده است. در غیر این صورت خطای چند بیتی.

تضمین می‌شود تنها یکی از خطوط دارای خطا است.
ا Two-dimensional Parity Check
فرستنده:
برای encode پیام در این روش، ابتدا باید parity bit داده ها را محاسبه کنیم. اگر تعداد ۱ها زوج باشد parity bit = 0 و در صورت فرد بودن تعداد آن‌ها parity bit = 1 است. در روش دو بعدی، علاوه بر هر سطر از داده ها، parity bit هر ستون هم محسابه میکنیم و درنهایت همه آنهارا به داده می‌چسبانیم و ارسال می‌کنیم.

parity bittwo dim parity bit

مثال
binaryStrings1 = new String[] {
    "1101",
    "1010",
    "1111",
    "1001",
};
encodedBinaryStrings1 = new String[] {
    "11011",
    "10100",
    "11110",
    "10010",
    "00011",
};
Java
گیرنده:
برای بررسی وجود خطا در داده ها، همانند فرستنده، parity bit داده های سطر و ستون محاسبه می‌کنیم. اگر مقدار همه parity bit ها ۰ باشد، به این معناست که خطایی در داده وجود نداشته. اگر parity bit تنها یک سطر و تنها یک ستون ۱ باشد، خطای تک بیتی در خانه با سطر و ستون تشخیص داده شده رخ داده است. در غیر این صورت خطای چند بیتی.

جزئیات برنامه
ابتدا پروژه اولیه را از این لینک دانلود کنید.

بسته‌ی exceptions
این بسته شامل دو استثنا با نام‌های SingleBitErrorException و MultipleBitErrorException است. هرگاه تشخیص‌دهنده‌ها متوجه شوند که تنها یکی از بیت‌های داده ارسالی دچار خطا شده است، باید استثنای SingleBitErrorException را پرتاب کنند. همچنین اگر داده ارسالی دچار خطایی غیر از آن شده باشد، استثنای MultipleBitErrorException را پرتاب میکنند.

بسته‌ی detectors
کلاس انتزاعی ErrorDetector
extensionFromNameErrorDetector.java
package detectors;

public abstract class ErrorDetector {
    int bitLength;
    String[] binaryStrings;

    public ErrorDetector(String[] binaryStrings) {
        this.bitLength = binaryStrings[0].length();
        this.binaryStrings = binaryStrings;
    }

    abstract public String[] encode();

    abstract public void check() throws SingleBitErrorException, MultipleBitErrorException;

    public static String toBinaryStringWithLeadingZeros(Integer number, Integer length) {
        // TODO
    }
}
Java
متد encode: این متد داده‌های binaryStrings را برای ارسال به گیرنده encode می‌کند.

متد check: این متد وظیفه تشخیص خطا بر اساس الگوریتم‌های توضیح داده شده را بر عهده دارد.

متد toBinaryStringWithLeadingZeros: این متد بررسی می‌کند اگر تعداد بیت های number از length کمتر باشد، به تعداد باقی‌مانده، ۰ به سمت چپ عدد اضافه کند.

کلاس‌های ChecksumDetector و CRCDetector و TwoDimParityBitDetector، کلاس انتزاعی ErrorDetector را به ارث می‌برند و متد‌های بالا را پیاده می‌کنند.
